Concepts
========

[[Parent]]: user_documentation.txt

Terminology
-----------

### Division of files 

Remark divides the files in the input directory
into three classes: 

 1. Files which have an associated document type,
 called _documentation files_.
 
 2. Additional files which were specified when 
 invoking Remark from the console, and which are
 not documentation files, called _auxiliary files_.
 
 3. The remaining files.
 
The documentation files and the auxiliary files are
together called _documents_. When Remark works with
the files:

 * The files in the class 3 are ignored.

 * The files in the class 2 are copied as they are
 into the output directory, unless they already exist there.

 * The files in the class 1 are treated differently 
based on the associated document type.

### Document types

A documentation file is associated to a document type 
by its filename extension. A _document type_ encapsulates 
the following processes:

 * Parsing of tags from a document given the name
 of the input file.

 * Computation of the document template given the
 the name of the input file.

 * Computation of the name of the output file given
 the name of the input file.
 
 * Deciding if AsciiMath is interpreted or not in
 the generated page.

### Document templates
 
A _document template_ is a piece of text in Remark syntax which, 
when expanded, generates the output file in Markdown syntax (to which 
html can be embedded). This template is generated by the document
type of a document. Most often this includes reading the contents of 
the file and representing it in some other, perhaps more convenient form.
For example, if the file were a source code file written in some programming
language, the document template could apply highlighting to the code to 
make it easier to read. 

### Document tree

Every file under Remark is associated with a unique parent 
document file. This parent-child relation induces a tree where 
the documents are nodes and the edges denote a parent-child relation.
This tree is called the _document tree_ and is used to 
generate various useful information automatically. The root of this
tree is called the _orphan node_. If a document does not get assigned
a parent, it will be assigned to a child of the orphan node. This
node is useful as a way to check if one has remembered to link all
files into the documentation. 

### Tags and Parsers

_Tags_ embed information relevant to Remark into the documents.
The way the tags are read from a document is dependent on its 
associated document type and, more specifically, is encapsulated 
into tag parsers. A _tag parser_ is a Python class which implements 
a procedure to extract tags from specific types of documents.
The tag parsers can extract whatever information they want, however,
the following three bits of information are especially important for 
Remark: 
 
 * The name of the parent document file.
 
 * A rough description of the file (one line).
 
 * A more detailed description of the file (one line).

These information are important because they allow to deduce the form 
of the document tree (via parent documents), and to automatically name 
links (via descriptions). 

Implicit descriptions
---------------------

Often a group of documents can be described by a single description. 
This is the case e.g. with implementations that are scattered in several 
code files. To reduce the number of tag embeddings in these cases, 
Remark defines a few implicit deduction rules. These are:

 * Files which reside in the same directory and have the same name without 
 the extension share the same description.
 
 * A source file which does not have a description after the previous rule
 are given (if exists) the description of the source file which:
 	1. is in the same directory
 	2. has a description
 	3. without the extension has a filename which is the longest prefix 
 	of the name of the to-be-described file.

