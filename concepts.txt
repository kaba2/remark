Concepts
========

[[Parent]]: user_documentation.txt

Documents
---------

Remark treats files based on their filename extension.
Each supported filename extension is mapped to a _document type_. 
A document type contains (among other things) the following information:

 * input filename extension
 
 * output filename extension
 
 * document template

A _document template_ is a piece of text written in Remark syntax
which, when expanded, generates the output file.

A file with the extension '.txt' is called a _documentation file_. 
A file which contains source-code of some programming language is 
called a _source-code file_. A _document_ is a file which has an
associated document type in Remark.  

Every document under Remark is associated with a unique parent 
documentation file. This parent-child relation induces a tree where 
the documents are nodes and the edges denote a parent-child relation.
This tree is called the _document tree_ and is used to 
generate various useful information automatically to the webpages.

Tags
----

_Tags_ embed information relevant to Remark into the documents.  
In the case of source-code files, the embedding is done
by using special kind of comments (whatever the programming
language). The embedding of tags for documentation files is 
done specially. The purpose of tags is to deliver three bits 
of information:
 
 * The name of the parent documentation file.
 
 * A rough description of the file (one line).
 
 * A more detailed description of the file (one line).
 
Tags allow to deduce the form of the document tree 
(via parent documents), and to automatically name links 
(via descriptions). 

### Specifying a parent file

A documentation file specifies its parent document by writing somewhere
in the file 

	[[Parent]]: name_of_parent.txt 

You might notice that this is also a macro invocation.
This is indeed the case: the Parent macro has been given
a double-role both as a tag and a macro.   
	
A source-code file specifies its parent document by writing somewhere
in the file a comment of the form (examples in C++):

	// Documentation: name_of_documentation.txt

The specified parent file will be first searched from the current directory,
and if not found, sequentially through parent directories up to the 
project's root directory.

### Specifying descriptions

The description of a documentation file is given by its title.
A documentation file can not be given a detailed description.

A source-code file can be given a description by writing somewhere
in the file a comment of the form:

	// Description: Useful description here

One can transmit an additional line of information
about the purpose of the file by writing somewhere in the file
a comment of the form:

	// Detail: A more detailed description here

Implicit description
--------------------

Often a group of documents can be described by a single description. 
This is the case e.g. with implementations that take 
several code files. To reduce the number of tag embeddings in these cases, 
Remark defines a few implicit deduction rules. These are:

 * Files which reside in the same directory and have the same name without 
 the extension share the same description.
 
 * A source file which does not have a description after the previous rule
 are given (if exists) the description of the source file which:
 	1. is in the same directory
 	2. has a description
 	3. without the extension has a filename which is the longest prefix 
 	of the name of the to-be-described file.

Implicit parent document
------------------------

If a documentation file does not specify a parent file, it is assigned
a special orphan file as the parent file. If a source-code file does not 
specify a parent file, Remark gives the file an implicitly-defined parent 
file. The logic for this goes as follows:

 * In the same directory, search for the longest prefix file (excluding the 
 file itself). Give documentation files (.txt) priority over source-code 
 files (i.e. consider them longer). Do not consider source-code files 
 which do not specify a parent file. If there are multiple candidate 
 source-code files, pick one arbitrarily (Remark reports a warning
 about the ambiguity). 
 
 * If a documentation file is found, use it as a parent file. 

 * If a source-code file is found, use its parent as a parent file. 

 * Otherwise use a special orphan file as a parent file.


