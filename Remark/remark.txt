Remark
======

[Back to Homepage of Kalle Rutanen][Back]

[Back]: http://kaba.hilvi.org

Description
-----------

Remark is a Python library designed for generating documentation for software libraries.

Main features
-------------

### Human readable, non-redundant content description 

In Remark, the documentation is written in slightly modified 
Markdown syntax. This syntax fulfills the following goals:
 
 * The representation is decoupled from the content.  
 
 * The content description is as human-readable as possible.
 
 * There is minimal redundancy. 

The first item means that Markdown covers only structural matters 
(e.g. a section, a sub-section, a table, emphasis, etc). The 
representation of the content (colors, fonts, etc.) can be 
arbitrarily changed later without touching the content. Contrast 
this to common text editing programs. For an example, have a look 
at the Markdown sources of this page.

In its original form, Markdown lacks the ability to typeset mathematics. 
To remedy this, Remark extends the Markdown syntax with the AsciiMath 
syntax. AsciiMath is a syntax which formalizes a commonly used notation 
for mathematical formulas. Similar notations have been used for decades 
in newsgroup discussions where only ASCII characters are available for 
typesetting mathematics. AsciiMath fulfills the following goal:

 * The description of the formulas are as human-readable as possible.

An example of the AsciiMath syntax is given by 
`x = (-b +- sqrt(b^2 - 4ac)) / (2a)`. Contrast this to e.g. Latex.
Remark inherits the properties of both Markdown and AsciiMath.

### Automatic generation of links

Usually each document in documentation can be given a title or some 
kind of a description. When building documentation manually, one
faces the task of building links between documents and naming
each of them with the description of the target document. However,
this quickly becomes a maintenance problem because the link 
descriptions will need to be corrected every time the target 
document's description changes. Remark solves this problem by
embedding to each document its description. This way links can be
named automatically by fetching the description of the target
document. 

Most often a documentation has a tree structure. This means that each 
document has a well-defined parent document with the subject of the 
matter generalizing towards the parent. Again, when building links
between parents and children, one is faced with a maintenance problem:
if one changes a parent of a document, then one should remember to
remove a link from the old parent and insert a link to the new parent.
Remark solves this problem by embedding to each document its parent.
This way the links between a parent and a child can be generated
(and named) automatically. 

### Implicit deduction of parent-child relationships and descriptions

Often a group of documents can be described by a single description or
a single parent. This is the case e.g. with implementations that take 
several code files. To reduce the number of tag embeddings in these cases, 
Remark defines a few implicit deduction rules. These are:

 * Files which reside in the same directory and have the same name without 
 the extension share the same description.
 
 * A source file which does not have a description even after the previous rule
 are given (if exists) the description of the source file which:
 	1. is in the same directory
 	2. has a description
 	3. without the extension has a filename which is the longest prefix 
 	of the name of the to-be-described file.
 	



