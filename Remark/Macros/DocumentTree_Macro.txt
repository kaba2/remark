DocumentTree macro
==================

[[Parent]]: available_macros.txt

The DocumentTree macro generates a hierarhical, alphabetically ordered list of the 
[RemarkPage][RemarkPage]-documents in the document tree, using the current document 
as the root document. This ordered list is enclosed in a `<div>` block, 
so that the links in the document-tree can be styled using CSS.

[RemarkPage]: [[Ref]]: RemarkPage_DocumentType.txt

Properties
-----------

### Output type

Remark

### Output expansion default

Disabled.

### Parameters

Ignored.

### Variables

DocumentTree.class_name
: 	The name of the html-class to give to the `<div>` tag. The html-class 
	allows to style the generated list using CSS.
	Default DocumentTree.

DocumentTree.min_depth
:	Minimum depth for a document to be listed.
	Default 1 (i.e. the current document is not listed).

DocumentTree.max_depth
:	Maximum depth for a document to be listed.
	Default 10.

DocumentTree.include
:	A glob which decides whether a given document with a given 
	include-tag value is to be included in the list. 
	Default * (matches everything).

DocumentTree.include_tag
:	An identifier specifying the tag to use for include filtering.
	Default 'document_type'.

DocumentTree.include_regex
:	A regular expression which decides whether a given document 
	with a given include-tag value is to be included in the list.
	Default empty.

DocumentTree.exclude
:	A glob which decides whether a given document with a given
	exclude-tag is to be excluded from the list.
	Default empty.

DocumentTree.exclude_tag
:	An identifier specifying the tag to use for exclude filtering. 
	Default 'document_type'.

DocumentTree.exclude_regex
:	A regular expression which decides whether a given document 
	with a given exclude-tag value is to be excluded from the list.
	Default empty.

Globs and regular expressions
-----------------------------

A _glob_ is a pattern matching string familiar from file 
systems: * matches anything any number of times, ? matches
anything at most one time, and the braces can be used to 
list alternatives separated by commas, as in {a, b, c}.
Alternatives may also be separated by spaces. For example, 
?at.png *.tar.{gz, bz2} matches at.png, bat.png, cat.png, 
somefile.tar.gz and anotherfile.tar.bz2. If a glob is
given in multiple rows, the rows are joined into a single 
string separated by a space.

A regular expression is given in Python's regular expression 
syntax. For example, (ab)*\.txt matches .txt, ab.txt, abab.txt, 
and so on. The regex filters take precedence over the glob 
filters. Regular expressions are more powerful than globs,
but they are also less readable. If a regular expression
is given in multiple rows, the rows are joined together 
separated by a regex matching the newline character \n. 

Exclusion takes priority over include. 

Examples
--------

[[Example]]:
	[[DocumentTree]]

[[Example]]:
	[[set_many DocumentTree]]:
		min_depth 0
	[[DocumentTree]]

[[Example]]:
	[[set_many DocumentTree]]:
		min_depth 0
		include_tag document_type
		include RemarkPage
	[[DocumentTree]]



