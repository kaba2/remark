DocumentTree macro
==================

[[Parent]]: available_macros.txt

The DocumentTree macro generates a hierarhical, alphabetically ordered list of the 
[RemarkPage][RemarkPage]-documents in the document tree, using the current document 
as the root document. This ordered list is enclosed in a `<div>` block, 
so that the links in the document-tree can be styled using CSS.

[RemarkPage]: [[Ref]]: RemarkPage_DocumentType.txt

Properties
-----------

### Output type

Remark

### Output expansion default

Disabled.

### Parameters

Ignored.

### Variables

DocumentTree.class_name
: 	The name of the html-class to give to the `<div>` tag. The html-class 
	allows to style the generated list using CSS.
	Default `DocumentTree`.

DocumentTree.exclude
:	A glob which decides whether a given document with a given
	exclude-tag is to be excluded from the list.
	Default empty (matches nothing).

DocumentTree.exclude_regex
:	A regular expression which decides whether a given document 
	with a given exclude-tag value is to be excluded from the list.
	Default empty (the glob is used instead).

DocumentTree.exclude_tag
:	An identifier specifying the tag to use for exclude filtering. 
	Default `document_type`.

DocumentTree.root_document
:	The document to use as the root node.
	Default `[[tag file_name]]` (pre-expanded).

DocumentTree.include
:	A glob which decides whether a given document with a given 
	include-tag value is to be included in the list. 
	Default `file_name *` (matches anything).

DocumentTree.include_regex
:	A regular expression which decides whether a given document 
	with a given include-tag value is to be included in the list.
	Default empty (the glob is used instead).

DocumentTree.include_tag
:	An identifier specifying the tag to use for include filtering.
	Default 'document_type'.

DocumentTree.max_depth
:	Maximum depth for a document to be listed.
	Default 10.

DocumentTree.min_depth
:	Minimum depth for a document to be listed.
	Default 1 (i.e. the current document is not listed).

Globs and regular expressions
-----------------------------

A _glob_ is a pattern matching string familiar from file 
systems: * matches anything any number of times, ? matches
anything at most one time, [seq] matches any character in seq,
and [!seq] matches any character not in seq. For example, ?at.png 
matches at.png, bat.png, and cat.png. 

A regular expression is given in Python's regular expression 
syntax. For example, (ab)*\.txt matches .txt, ab.txt, abab.txt, 
and so on. The regex is appended \\Z so that it must match the 
whole string. Regular expressions are more powerful than globs,
but they are also less readable.

Multiple rows are interpreted as alternatives. Possible 
surrounding whitespace is stripped off for each line.
If both regex filters and glob filters are given, they
are combined as alternatives.

Examples
--------

[[Example]]:
	[[DocumentTree]]

[[Example]]:
	[[set_many DocumentTree]]:
		min_depth 0
	[[DocumentTree]]

[[Example]]:
	[[set_many DocumentTree]]:
		min_depth 0
		include document_type RemarkPage
	[[DocumentTree]]



