File searching algorithm
========================

[[Parent]]: macros.txt

Many of the macros, such as the [[Link: Link_Macro.txt]], 
[[Link: FileLink_Macro.txt]], [[Link: DirectoryLink_Macro.txt]], 
[[Link: Gallery_Macro.txt]], and the [[Link: Ref_Macro.txt]],
use the same file-searching algorithm to match a given file 
path to a unique file in the document tree. We specify that algorithm
here. 

Algorithm
--------- 

A file can be specified either by a pure filename or a relative path.

### Pure filenames

A _pure filename_ is a path with no directory-related information. 
It is searched as follows:

 1. The file is searched from the current directory.
 
 2. If the file can not be found, the file is searched from the 
 parent directories up until to the documentation root.
 
 3. If the file still can not be found, the file is searched across
 all documents in the document tree. In case there are multiple 
 documents with the given filename, Remark picks one arbitrarily and
 emits a warning about the ambiguity.

For example, the parameters in the following macro invocations 
are pure filenames:

	[[Link]]: remark.txt

	[[Link]]: tag_parsers.txt
	
### Relative paths

A _relative path_ is a path which locates a file relative to the 
directory of the currently handled document. In this case the file
is searched only at this directory. For example, the parameters in 
the following macro invocations are relative paths:

	[[Link]]: ../../remark.txt
	
	[[Link]]: ../TagParsers/tag_parsers.txt

Notes
-----

The pure filenames should be used whenever possible. This is because
the relative paths are sensitive to changes in the directory structure.
For example, if this document was moved to a new sub-directory in the 
current directory, the link above would be broken. The relative paths 
are provided only to resolve the cases where a pure filename would be 
ambiguous. To enforce this, Remark emits a warning whenever a file is 
searched using a relative path where a pure filename would suffice.




