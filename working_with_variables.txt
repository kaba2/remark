Working with variables
======================

[[Parent]]: variables.txt

This page introduces the tools that are used to
work with variables in Remark.

Defining variables
------------------

Variables can be defined and redefined as follows.

	[[set Gallery.thumb_min_length: 50]]

	[[set Gallery.thumb_min_length]]: 50

	[[set some_file_list]]:
		filename.txt
		another.txt
		
	[[set_many]]:
		Gallery.thumb_min_length 50
		Gallery.thumb_max_length 70
		
	[[set_many Gallery]]:
		thumb_min_length 55
		thumb_max_length 75
		
[[set Gallery.thumb_min_length: 50]]

[[set Gallery.thumb_min_length]]: 50

[[set some_file_list]]:
	filename.txt
	another.txt
	
[[set_many]]:
	Gallery.thumb_min_length 50
	Gallery.thumb_max_length 70
	
[[set_many Gallery]]:
	thumb_min_length 55
	thumb_max_length 75

Note that with `set_many` it is not possible to
assign multi-line parameters.

Retrieving a variable
---------------------

The text contained in a variable can be obtained
in this way:

	[[get Gallery.thumb_min_length]]

	[[get some_file_list]]
	
This simply expands into the stored text:

[[+Verbatim]]:
	[[get Gallery.thumb_min_length]]
	
	[[get some_file_list]]

Appending to a variable
-----------------------

Lines can be appended into a variable like this:

	[[add some_file_list]]:
		third_file.txt
		
[[add some_file_list]]:
	third_file.txt

After which invoking

	[[get some_file_list]]
	
Yields:

[[+Verbatim]]:
	[[get some_file_list]]

[[Comment]]:
	Scopes
	------
	
	Each variable lives in some scope which
	defines its visibility and life-time. Each macro
	invocation creates a child-scope into the current
	scope. Variables defined inside the macro invocation
	are placed into this scope. When a macro finishes, its scope
	is closed and all the local variables in the scope are 
	destroyed. When no macro invocations are active, the
	only active scope is the _global scope_. Child scopes
	can refer to variables in the parent scopes, but not
	vice versa.  
	
	For example:
	
		[[set global_variable]]:
			Something interesting.
	
		[[Comment]]:
			[[set filename]]: some_file.txt
	
		[[Comment]]: 
			The 'filename' variable does not exist
			at this point anymore. However, the
			'global_variable' is visible since it
			is in a parent scope:
			
			[[get global_variable]]	

